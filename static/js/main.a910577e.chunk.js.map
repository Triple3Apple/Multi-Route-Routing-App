{"version":3,"sources":["App.js","index.js"],"names":["App","mapElement","useRef","useState","map","setMap","longitude","setLongitude","latitude","setLatitude","convertToPoints","lngLat","point","lat","lng","useEffect","origin","destinations","ttm","key","process","container","current","stylesVisibility","trafficIncidents","trafficFlow","center","zoom","popup","offset","bottom","setHTML","element","document","createElement","className","marker","draggable","setLngLat","addTo","on","getLngLat","setPopup","togglePopup","addMarker","recalculateRoutes","locations","callParameters","destination","origins","Promise","resolve","reject","tts","matrixRouting","then","matrixAPIResults","resultsArray","matrix","result","index","location","drivingtime","response","routeSummary","travelTimeInSeconds","sort","a","b","sortedLocations","sortDestinations","sorted","unshift","calculateRoute","routeData","geoJson","getLayer","removeLayer","removeSource","addLayer","id","type","source","data","paint","drawRoute","toGeoJson","e","push","addDeliveryMarker","remove","ref","name","placeholder","onChange","target","value","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a910577e.chunk.js","sourcesContent":["\n\nimport './App.css';\n// The css below makes the marker appear correctly.\nimport '@tomtom-international/web-sdk-maps/dist/maps.css';\n\nimport { useEffect, useRef, useState } from 'react';\nimport * as ttm from '@tomtom-international/web-sdk-maps';\nimport * as tts from '@tomtom-international/web-sdk-services';\n\n\n\nconst App = () => {\n  const mapElement = useRef();\n  const [map, setMap] = useState({});\n  const [longitude, setLongitude] = useState(-0.112869);\n  const [latitude, setLatitude] = useState(51.504);\n\n  // Hard coded for now\n  // 33.42153444499368, -111.93985876629507\n\n  // const latitude = 33.42153444499368;\n  // const longitude = -111.93985876629507;\n\n  // const latitude = 33.42153444499368;\n  // const longitude = -111.93985876629507;\n\n  // Function that gets lngLat and converts to points.\n  const convertToPoints = (lngLat) => {\n    return {\n      point: {\n        latitude: lngLat.lat,\n        longitude: lngLat.lng,\n      }\n    }\n  }\n\n  const drawRoute = (geoJson, map) => {\n    if (map.getLayer('route')) {\n      map.removeLayer('route');\n      map.removeSource('route');\n    }\n    map.addLayer({\n      id: 'route',\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: geoJson,\n      },\n      paint: {\n        'line-color': 'red',\n        'line-width': 6,\n      }\n    })\n  }\n\n  const addDeliveryMarker = (lngLat, map) => {\n    const element = document.createElement('div');\n    element.className = 'marker-delivery';\n    new ttm.Marker({\n      element: element\n    })\n      .setLngLat(lngLat)\n      .addTo(map)\n  }\n\n  useEffect(() => {\n\n    const origin = {\n      lat: latitude,\n      lng: longitude,\n    }\n\n    const destinations = [];\n\n    // https://developer.tomtom.com/blog/build-different/tilt-and-rotation-tomtom-javascript-maps-sdk-web-v6\n    let map = ttm.map({\n      // REMEMBER!!!! for React, env variables need to have the REACT_APP prefix!!!!!\n      key: process.env.REACT_APP_TOM_TOM_KEY,\n      container: mapElement.current,\n      stylesVisibility: {\n        trafficIncidents: true,\n        trafficFlow: true,\n      },\n      center: { lat: latitude, lng: longitude },\n      zoom: 13,\n    });\n\n    setMap(map);\n\n    const addMarker = () => {\n\n      // Where the popup is placed relative to the marker\n      const popupOffset = {\n        bottom: [0, -30]\n      }\n\n      const popup = new ttm.Popup({ offset: popupOffset }).setHTML('This is you!');\n\n      const element = document.createElement('div');\n      element.className = 'marker';\n\n      const marker = new ttm.Marker({\n        draggable: true,\n        element: element,\n      })\n        .setLngLat({ lat: latitude, lng: longitude })\n        .addTo(map);\n\n\n      // Runs when marker has stopped being dragged.\n      marker.on('dragend', () => {\n        // Get new longitude and latitude.\n        const lngLat = marker.getLngLat();\n        setLatitude(lngLat.lat);\n        setLongitude(lngLat.lng);\n      })\n\n      marker.setPopup(popup).togglePopup();\n\n    }\n    addMarker()\n\n    const sortDestinations = (locations) => {\n      const pointsForDestinations = locations.map((destination) => {\n        return convertToPoints(destination)\n      })\n\n      const callParameters = {\n        key: process.env.REACT_APP_TOM_TOM_KEY,\n        destinations: pointsForDestinations,\n        origins: [convertToPoints(origin)],\n      }\n\n      return new Promise((resolve, reject) => {\n        tts.services\n          .matrixRouting(callParameters)\n          .then((matrixAPIResults) => {\n            const results = matrixAPIResults.matrix[0]\n            const resultsArray = results.map((result, index) => {\n              return {\n                location: locations[index],\n                drivingtime: result.response.routeSummary.travelTimeInSeconds,\n              }\n            });\n\n            resultsArray.sort((a, b) => {\n              return a.drivingtime - b.drivingtime;\n            });\n\n            const sortedLocations = resultsArray.map((result) => {\n              return result.location;\n            });\n\n            resolve(sortedLocations);\n\n          });\n      });\n    }\n\n    const recalculateRoutes = () => {\n      sortDestinations(destinations).then((sorted) => {\n        sorted.unshift(origin);\n\n        tts.services\n          .calculateRoute({\n            key: process.env.REACT_APP_TOM_TOM_KEY,\n            locations: sorted,\n          })\n          .then((routeData) => {\n            const geoJson = routeData.toGeoJson();\n            drawRoute(geoJson, map);\n          });\n      });\n    }\n\n    map.on('click', (e) => {\n      destinations.push(e.lngLat);\n      addDeliveryMarker(e.lngLat, map);\n      recalculateRoutes();\n    })\n\n    return () => map.remove();\n\n  }, [latitude, longitude]);\n\n  // html code below\n  // TODO: Fix problem with entering negative values (maybe add button that submits the \n  // result, or some sort of verification?).\n  return (\n    <>\n      {map && <div className=\"app\">\n        <div ref={mapElement} className='map'></div>\n        <div className=\"search-bar\">\n          <h1>Where to?</h1>\n          <input\n            type=\"text\"\n            name=\"\"\n            id=\"latitude\"\n            placeholder=\"Put in Latitude\"\n            onChange={(e) => { setLatitude(e.target.value) }}\n          />\n          <input\n            type=\"text\"\n            name=\"\"\n            id=\"longitude\"\n            placeholder=\"Put in Longitude\"\n            onChange={(e) => { setLongitude(e.target.value) }}\n          />\n        </div>\n      </div>}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}